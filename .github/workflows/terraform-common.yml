name: BC Gov Terraform Workflow

on:
  workflow_call:
    inputs:
      environment:
        description: 'Environment to deploy (dev, test, prod)'
        required: true
        type: string
      terraform_vars:
        description: 'Additional terraform variables (JSON format)'
        required: false
        type: string
        default: '{}'
      plan_only:
        description: 'Only run plan, skip apply'
        required: false
        type: boolean
        default: false
    secrets:
      AZURE_CLIENT_ID:
        required: true
      AZURE_TENANT_ID:
        required: true
      AZURE_SUBSCRIPTION_ID:
        required: true

permissions:
  id-token: write  # Required for OIDC
  contents: read   # Required for actions/checkout

jobs:
  terraform:
    runs-on: self-hosted  # BC Gov self-hosted runner requirement
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Azure login with OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: true
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # Validate environment path exists
      - name: Validate Environment
        run: |
          ENV_PATH="terraform/environments/${{ inputs.environment }}"
          if [ ! -d "$ENV_PATH" ]; then
            echo "Error: Environment directory '$ENV_PATH' does not exist"
            exit 1
          fi

      # Initialize Terraform with all modules
      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="key=${{ inputs.environment }}/terraform.tfstate"
        working-directory: terraform/environments/${{ inputs.environment }}

      # --- QUALITY GATES: Terraform Format Check ---
      - name: Terraform Format Check (fmt)
        run: terraform fmt -check -recursive ../..
        working-directory: terraform/environments/${{ inputs.environment }}

      # --- QUALITY GATES: Terraform Lint (tflint) ---
      - name: Setup tflint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.50.3
      - name: Run tflint
        run: tflint --init && tflint --recursive
        working-directory: terraform/environments/${{ inputs.environment }}

      # --- QUALITY GATES: Terraform Security Scan (tfsec) ---
      - name: Setup tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          version: latest
      - name: Run tfsec
        run: tfsec ../..
        working-directory: terraform/environments/${{ inputs.environment }}

      # Validate all Terraform configurations
      - name: Terraform Validate
        run: terraform validate
        working-directory: terraform/environments/${{ inputs.environment }}

      # Plan with environment-specific variables
      - name: Terraform Plan
        run: |
          # Convert JSON variables to terraform variables
          echo '${{ inputs.terraform_vars }}' | jq -r 'to_entries | .[] | "-var=\"\(.key)=\(.value)\""' > vars.args
          
          terraform plan \
            -var="environment=${{ inputs.environment }}" \
            $(cat vars.args) \
            -out=tfplan
        working-directory: terraform/environments/${{ inputs.environment }}

      # Post the plan as a comment if this is a PR
      - name: Post Plan to PR
        if: github.event_name == 'pull_request'
        run: |
          terraform show -no-color tfplan > plan.txt
          # Here you would typically use GitHub API to post the plan as a PR comment
        working-directory: terraform/environments/${{ inputs.environment }}

      # Apply the changes (only on main branch push and if plan_only is false)
      - name: Terraform Apply
        if: |
          github.ref == 'refs/heads/main' && 
          github.event_name == 'push' && 
          !inputs.plan_only
        run: terraform apply -auto-approve tfplan
        working-directory: terraform/environments/${{ inputs.environment }}
