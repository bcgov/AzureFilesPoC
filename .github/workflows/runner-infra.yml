# /.github/workflows/runner-infra.yml
name: Deploy CI/CD Self-Hosted Runner Infrastructure

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      plan_only:
        description: 'Only run plan (no apply)'
        required: true
        type: boolean
        default: true
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/environments/cicd/**'
      - '.github/workflows/runner-infra.yml'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  terraform-cicd:
    name: 'Terraform Deploy CI/CD Runner Infrastructure'
    runs-on: ubuntu-latest
    environment: dev
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC: true
      # Note: TF_VAR environment variables are not needed since we generate terraform.tfvars dynamically

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false

      - name: Create terraform.tfvars from secrets and variables
        env:
          SSH_PUBLIC_KEY: ${{ vars.ADMIN_SSH_KEY_PUBLIC }}
        run: |
          cat > terraform/terraform.tfvars << 'EOF'
          # =============================================================================
          # ENVIRONMENT AND LOCATION CONFIGURATION
          # =============================================================================
          environment     = "${{ vars.ENVIRONMENT }}"
          azure_location  = "${{ vars.AZURE_LOCATION }}"
          azure_subscription_id = "${{ vars.AZURE_SUBSCRIPTION_ID }}"
          
          # =============================================================================
          # AZURE LANDING ZONE RESOURCES (PRE-PROVISIONED BY BC GOV)
          # =============================================================================
          # Service Principal
          service_principal_id = "${{ vars.SERVICE_PRINCIPAL_ID }}"
          
          # Existing VNet and Networking (Landing Zone)
          vnet_name             = "${{ vars.VNET_NAME }}"
          vnet_resource_group   = "${{ vars.VNET_RESOURCE_GROUP }}"
          vnet_address_space    = ${{ vars.VNET_ADDRESS_SPACE }}
          vnet_dns_servers      = ${{ vars.VNET_DNS_SERVERS }}
          vnet_id               = "${{ vars.VNET_ID }}"
          dns_servers           = ${{ vars.DNS_SERVERS }}
          
          # =============================================================================
          # PROJECT RESOURCE GROUPS (CREATED BY USER IDENTITY - NOT TERRAFORM)
          # =============================================================================
          # Main DEV Resource Group
          resource_group       = "${{ vars.RESOURCE_GROUP }}"
          resource_id          = "${{ vars.RESOURCE_ID }}"
          
          # DEV Tools Resource Group
          cicd_resource_group_name = "${{ vars.CICD_RESOURCE_GROUP_NAME }}"
          
          # =============================================================================
          # TERRAFORM STATE STORAGE CONFIGURATION  
          # =============================================================================
          tfstate_container = "${{ vars.TFSTATE_CONTAINER }}"
          tfstate_rg        = "${{ vars.TFSTATE_RG }}"
          tfstate_sa        = "${{ vars.TFSTATE_SA }}"
          
          # =============================================================================
          # STORAGE AND FILE SERVICES
          # =============================================================================
          storage_account_name = "${{ vars.STORAGE_ACCOUNT_NAME }}"
          file_share_name      = "${{ vars.FILE_SHARE_NAME }}"
          file_share_quota_gb  = ${{ vars.FILE_SHARE_QUOTA_GB }}
          
          # =============================================================================
          # NETWORKING CONFIGURATION
          # =============================================================================
          # Network Security Groups
          network_security_group         = "${{ vars.NETWORK_SECURITY_GROUP }}"
          bastion_network_security_group = "${{ vars.BASTION_NETWORK_SECURITY_GROUP }}"
          runner_network_security_group  = "${{ vars.RUNNER_NETWORK_SECURITY_GROUP }}"
          
          # Subnets
          subnet_name             = "${{ vars.SUBNET_NAME }}"
          subnet_address_prefixes = ${{ vars.SUBNET_ADDRESS_PREFIXES }}
          bastion_subnet_name     = "${{ vars.BASTION_SUBNET_NAME }}"
          bastion_address_prefix  = ${{ vars.BASTION_ADDRESS_PREFIX }}
          runner_subnet_name      = "${{ vars.RUNNER_SUBNET_NAME }}"
          runner_vnet_address_space = ${{ vars.RUNNER_VNET_ADDRESS_SPACE }}
          
          # Gateway Configuration
          gateway_subnet_name            = "${{ vars.GATEWAY_SUBNET_NAME }}"
          gateway_subnet_address_prefix = ${{ vars.GATEWAY_SUBNET_ADDRESS_PREFIX }}
          vng_name                      = "${{ vars.VNG_NAME }}"
          vng_public_ip_name            = "${{ vars.VNG_PUBLIC_IP_NAME }}"
          vng_sku                       = "${{ vars.VNG_SKU }}"
          vng_type                      = "${{ vars.VNG_TYPE }}"
          vng_vpn_type                  = "${{ vars.VNG_VPN_TYPE }}"
          
          # =============================================================================
          # BASTION HOST CONFIGURATION
          # =============================================================================
          bastion_name           = "${{ vars.BASTION_NAME }}"
          bastion_public_ip_name = "${{ vars.BASTION_PUBLIC_IP_NAME }}"
          
          # =============================================================================
          # GITHUB RUNNER VM CONFIGURATION
          # =============================================================================
          runner_vm_name           = "${{ vars.RUNNER_VM_NAME }}"
          runner_vm_ip_address     = "${{ vars.RUNNER_VM_IP_ADDRESS }}"
          runner_vm_admin_username = "${{ vars.RUNNER_VM_ADMIN_USERNAME }}"
          runner_vm_size           = "${{ vars.RUNNER_VM_SIZE }}"
          
          # =============================================================================
          # SECURITY AND ACCESS CONFIGURATION
          # =============================================================================
          my_github_actions_spn_object_id = "${{ vars.MY_GITHUB_ACTIONS_SPN_OBJECT_ID }}"
          my_home_ip_address           = "${{ vars.MY_HOME_IP_ADDRESS }}"
          
          # =============================================================================
          # RESOURCE TAGGING
          # =============================================================================
          common_tags = ${{ vars.COMMON_TAGS }}
          EOF
          
          # Add SSH key using printf for safe handling of special characters and newlines
          printf 'admin_ssh_key_public = "%s"\n' "$SSH_PUBLIC_KEY" >> terraform/terraform.tfvars
          # =============================================================================
          # ENVIRONMENT AND LOCATION CONFIGURATION
          # =============================================================================
          environment     = "${{ vars.ENVIRONMENT }}"
          azure_location  = "${{ vars.AZURE_LOCATION }}"
          azure_subscription_id = "${{ vars.AZURE_SUBSCRIPTION_ID }}"
          
          # =============================================================================
          # AZURE LANDING ZONE RESOURCES (PRE-PROVISIONED BY BC GOV)
          # =============================================================================
          # Service Principal
          service_principal_id = "${{ vars.SERVICE_PRINCIPAL_ID }}"
          
          # Existing VNet and Networking (Landing Zone)
          vnet_name             = "${{ vars.VNET_NAME }}"
          vnet_resource_group   = "${{ vars.VNET_RESOURCE_GROUP }}"
          vnet_address_space    = ${{ vars.VNET_ADDRESS_SPACE }}
          vnet_dns_servers      = ${{ vars.VNET_DNS_SERVERS }}
          vnet_id               = "${{ vars.VNET_ID }}"
          dns_servers           = ${{ vars.DNS_SERVERS }}
          
          # =============================================================================
          # PROJECT RESOURCE GROUPS (CREATED BY USER IDENTITY - NOT TERRAFORM)
          # =============================================================================
          # Main DEV Resource Group
          resource_group       = "${{ vars.RESOURCE_GROUP }}"
          resource_id          = "${{ vars.RESOURCE_ID }}"
          
          # DEV Tools Resource Group
          cicd_resource_group_name = "${{ vars.CICD_RESOURCE_GROUP_NAME }}"
          
          # =============================================================================
          # TERRAFORM STATE STORAGE CONFIGURATION  
          # =============================================================================
          tfstate_container = "${{ vars.TFSTATE_CONTAINER }}"
          tfstate_rg        = "${{ vars.TFSTATE_RG }}"
          tfstate_sa        = "${{ vars.TFSTATE_SA }}"
          
          # =============================================================================
          # STORAGE AND FILE SERVICES
          # =============================================================================
          storage_account_name = "${{ vars.STORAGE_ACCOUNT_NAME }}"
          file_share_name      = "${{ vars.FILE_SHARE_NAME }}"
          file_share_quota_gb  = ${{ vars.FILE_SHARE_QUOTA_GB }}
          
          # =============================================================================
          # NETWORKING CONFIGURATION
          # =============================================================================
          # Network Security Groups
          network_security_group         = "${{ vars.NETWORK_SECURITY_GROUP }}"
          bastion_network_security_group = "${{ vars.BASTION_NETWORK_SECURITY_GROUP }}"
          runner_network_security_group  = "${{ vars.RUNNER_NETWORK_SECURITY_GROUP }}"
          
          # Subnets
          subnet_name             = "${{ vars.SUBNET_NAME }}"
          subnet_address_prefixes = ${{ vars.SUBNET_ADDRESS_PREFIXES }}
          bastion_subnet_name     = "${{ vars.BASTION_SUBNET_NAME }}"
          bastion_address_prefix  = ${{ vars.BASTION_ADDRESS_PREFIX }}
          runner_subnet_name      = "${{ vars.RUNNER_SUBNET_NAME }}"
          runner_vnet_address_space = ${{ vars.RUNNER_VNET_ADDRESS_SPACE }}
          
          # Gateway Configuration
          gateway_subnet_name            = "${{ vars.GATEWAY_SUBNET_NAME }}"
          gateway_subnet_address_prefix = ${{ vars.GATEWAY_SUBNET_ADDRESS_PREFIX }}
          vng_name                      = "${{ vars.VNG_NAME }}"
          vng_public_ip_name            = "${{ vars.VNG_PUBLIC_IP_NAME }}"
          vng_sku                       = "${{ vars.VNG_SKU }}"
          vng_type                      = "${{ vars.VNG_TYPE }}"
          vng_vpn_type                  = "${{ vars.VNG_VPN_TYPE }}"
          
          # =============================================================================
          # BASTION HOST CONFIGURATION
          # =============================================================================
          bastion_name           = "${{ vars.BASTION_NAME }}"
          bastion_public_ip_name = "${{ vars.BASTION_PUBLIC_IP_NAME }}"
          
          # =============================================================================
          # GITHUB RUNNER VM CONFIGURATION
          # =============================================================================
          runner_vm_name           = "${{ vars.RUNNER_VM_NAME }}"
          runner_vm_ip_address     = "${{ vars.RUNNER_VM_IP_ADDRESS }}"
          runner_vm_admin_username = "${{ vars.RUNNER_VM_ADMIN_USERNAME }}"
          runner_vm_size           = "${{ vars.RUNNER_VM_SIZE }}"
          
          # =============================================================================
          # SECURITY AND ACCESS CONFIGURATION
          # =============================================================================
          my_github_actions_spn_object_id = "${{ vars.MY_GITHUB_ACTIONS_SPN_OBJECT_ID }}"
          my_home_ip_address           = "${{ vars.MY_HOME_IP_ADDRESS }}"
          
          # =============================================================================
          # RESOURCE TAGGING
          # =============================================================================
          common_tags = ${{ vars.COMMON_TAGS }}
          EOF
          
          echo "✅ Generated terraform.tfvars from GitHub secrets and variables"
          echo "File size: $(wc -l < terraform/terraform.tfvars) lines"

      - name: Verify terraform.tfvars exists
        run: |
          if [ ! -f terraform/terraform.tfvars ]; then
            echo "❌ ERROR: terraform/terraform.tfvars not found!"
            echo "This file should have been generated from GitHub secrets and variables."
            exit 1
          else
            echo "✅ Found terraform/terraform.tfvars"
            echo "File size: $(wc -l < terraform/terraform.tfvars) lines"
          fi

      - name: Display terraform.tfvars content (Debug Step)
        run: |
          echo "Content of terraform/terraform.tfvars (first 20 lines):"
          head -20 terraform/terraform.tfvars
          echo "..."
          echo "Total lines: $(wc -l < terraform/terraform.tfvars)"

      - name: Terraform Init
        working-directory: terraform/environments/cicd
        run: terraform init -backend-config="resource_group_name=${{ vars.TFSTATE_RG }}" -backend-config="storage_account_name=${{ vars.TFSTATE_SA }}" -backend-config="container_name=${{ vars.TFSTATE_CONTAINER }}" -backend-config="key=cicd.terraform.tfstate"

      - name: Terraform Validate
        working-directory: terraform/environments/cicd
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: terraform/environments/cicd
        run: terraform plan -var-file="../../terraform.tfvars" -out=tfplan

      - name: Terraform Apply
        if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.plan_only == 'false')
        working-directory: terraform/environments/cicd
        run: terraform apply -auto-approve tfplan
