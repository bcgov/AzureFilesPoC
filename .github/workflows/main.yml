name: Azure Files PoC Deploy Infrastructure

# This workflow is the main entry point for Terraform infrastructure deployments.
# It uses the reusable terraform-common.yml workflow for the actual Terraform operations.

permissions:
  id-token: write # Required for OpenID Connect (OIDC) authentication with Azure
  contents: read  # Required to checkout the repository content

on:
  # Manual trigger with environment selection
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod
      plan_only:
        description: 'Only run plan (no apply)'
        required: true
        type: boolean
        default: true

  # Pull request automation - run Terraform plan on PRs
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/**'

# This concurrency block is critical. It prevents multiple runs from overlapping,
# which is the correct way to avoid "state is already locked" errors.
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # This job definition is an example using a reusable workflow.
  # We are focusing on the 'terraform-dev' job below.
  deploy-infrastructure:
    uses: ./.github/workflows/terraform-common.yml
    with:
      environment: ${{ github.event.inputs.environment || 'dev' }}
      plan_only: ${{ github.event.inputs.plan_only || true }}
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  # This is the primary job we have been fixing.
  terraform-dev:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.TENANT_ID }} # Corrected from secrets.AZURE_TENANT_ID to match common practice, but use your secret name
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false

      - name: Verify GitHub Vars (Debug Step)
        run: |
          echo "Verifying the formats of the GitHub variables as strings:"
          echo "DEV_SUBNET_ADDRESS_PREFIXES: ${{ vars.DEV_SUBNET_ADDRESS_PREFIXES }}"
          echo "DEV_VNET_ADDRESS_SPACE:      ${{ vars.DEV_VNET_ADDRESS_SPACE }}"
          echo "DEV_VNET_DNS_SERVERS:        ${{ vars.DEV_VNET_DNS_SERVERS }}"
          echo "DEV_COMMON_TAGS:             ${{ vars.DEV_COMMON_TAGS }}"

      - name: Create terraform/environments/dev directory if it doesn't exist
        run: mkdir -p terraform/environments/dev

      - name: Generate terraform.tfvars for dev
        run: |
          # This 'cat <<EOF' block writes the following text into the .tfvars file.
          # The key is the toJson() function, which correctly handles variables
          # that are stored as JSON strings in the GitHub UI.
          cat <<EOF > terraform/environments/dev/terraform.tfvars
          # --- Simple String and Number Variables ---
          azure_location              = "${{ vars.AZURE_LOCATION }}"
          dev_resource_group          = "${{ vars.DEV_RESOURCE_GROUP }}"
          dev_storage_account_name    = "${{ vars.DEV_STORAGE_ACCOUNT_NAME }}"
          dev_file_share_name         = "${{ vars.DEV_FILE_SHARE_NAME }}"
          dev_file_share_quota_gb     = ${{ vars.DEV_FILE_SHARE_QUOTA_GB }}
          dev_network_security_group  = "${{ vars.DEV_NETWORK_SECURITY_GROUP }}"
          dev_resource_id             = "${{ vars.DEV_RESOURCE_ID }}"
          dev_subnet_name             = "${{ vars.DEV_SUBNET_NAME }}"
          dev_vnet_id                 = "${{ vars.DEV_VNET_ID }}"
          dev_vnet_name               = "${{ vars.DEV_VNET_NAME }}"
          dev_vnet_resource_group     = "${{ vars.DEV_VNET_RESOURCE_GROUP }}"
          
          #================================================================================
          # This is the section you asked about. The toJson() function is the fix.
          # It takes the JSON-formatted string from the GitHub variable (e.g., ["10.0.0.1"])
          # and outputs it *exactly* as is, preserving the brackets and quotes, which
          # results in a correctly formatted list in the final .tfvars file.
          #================================================================================
          dev_subnet_address_prefixes = ${{ toJson(vars.DEV_SUBNET_ADDRESS_PREFIXES) }}
          dev_vnet_address_space      = ${{ toJson(vars.DEV_VNET_ADDRESS_SPACE) }}
          dev_vnet_dns_servers        = ${{ toJson(vars.DEV_VNET_DNS_SERVERS) }}
          common_tags                 = ${{ toJson(vars.DEV_COMMON_TAGS) }}
          EOF

      - name: Display Generated terraform.tfvars (Debug Step)
        run: |
          echo "Content of the generated terraform/environments/dev/terraform.tfvars:"
          cat terraform/environments/dev/terraform.tfvars || echo "File not found or empty."

      - name: Terraform Init
        working-directory: terraform/environments/dev
        run: terraform init -backend-config="resource_group_name=${{ vars.DEV_TFSTATE_RG }}" -backend-config="storage_account_name=${{ vars.DEV_TFSTATE_SA }}" -backend-config="container_name=${{ vars.DEV_TFSTATE_CONTAINER }}" -backend-config="key=dev.terraform.tfstate"

      - name: Terraform Validate
        working-directory: terraform/environments/dev
        run: terraform validate

      - name: Terraform Plan
        working-directory: terraform/environments/dev
        run: terraform plan -var-file=terraform.tfvars -out=tfplan

      # - name: Terraform Apply
      #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      #   working-directory: terraform/environments/dev
      #   run: terraform apply -auto-approve tfplan