name: Azure Files PoC Deploy Infrastructure

# This workflow is the main entry point for Terraform infrastructure deployments.
# It uses the reusable terraform-common.yml workflow for the actual Terraform operations.
#
# Related workflows:
# - terraform-common.yml: Reusable workflow with all Terraform steps (init, plan, apply)
# - terraform-validation.yml: Separate workflow for validating the overall CI/CD process
# - azure-login-validation.yml: Simple workflow for validating Azure authentication

permissions:
  id-token: write # Required for OpenID Connect (OIDC) authentication with Azure
  contents: read  # Required to checkout the repository content

on:
  # Manual trigger with environment selection
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod
      plan_only:
        description: 'Only run plan (no apply)'
        required: true
        type: boolean
        default: true

  # Pull request automation - run Terraform plan on PRs
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/**'

  # Main branch automation (disabled by default for safety)
  # push:
  #   branches: [ main ]
  #   paths:
  #     - 'terraform/**'
  #     - '.github/workflows/**'

jobs:
  # Primary Terraform workflow that uses the common reusable workflow
  # This job is configured to run when the workflow is manually dispatched.
  # The 'environment' and 'plan_only' inputs will be passed to the reusable workflow.
  deploy-infrastructure:
    uses: ./.github/workflows/terraform-common.yml
    with:
      environment: ${{ github.event.inputs.environment || 'dev' }}
      plan_only: ${{ github.event.inputs.plan_only || true }}
    secrets:
      AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      AZURE_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

  # Standalone job for 'dev' environment Terraform operations.
  # This job will run on pull requests (if paths match) and also when
  # the workflow is dispatched, unless specifically excluded by conditionals.
  # It's good for focused debugging or specific environment deployments.
  terraform-dev:
    runs-on: ubuntu-latest
    # Define environment variables for Terraform AzureRM provider.
    # ARM_USE_OIDC is crucial for telling the Azurerm provider to use OIDC authentication.
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC: true # <--- ADDED THIS LINE

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.6 # Ensure this version is compatible with your code

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          # enable-AzPSSession is typically not needed for Terraform as it uses the Azure CLI context.
          enable-AzPSSession: false

      - name: Verify GitHub Vars (Debug Step)
        run: |
          echo "Checking GitHub Variables for dev environment:"
          echo "AZURE_LOCATION: ${{ vars.AZURE_LOCATION }}"
          echo "DEV_RESOURCE_GROUP: ${{ vars.DEV_RESOURCE_GROUP }}"
          echo "DEV_STORAGE_ACCOUNT_NAME: ${{ vars.DEV_STORAGE_ACCOUNT_NAME }}"
          echo "DEV_FILE_SHARE_NAME: ${{ vars.DEV_FILE_SHARE_NAME }}"
          echo "DEV_FILE_SHARE_QUOTA_GB: ${{ vars.DEV_FILE_SHARE_QUOTA_GB }}"
          echo "DEV_DNS_SERVERS: ${{ vars.DEV_DNS_SERVERS }}"
          echo "DEV_NETWORK_SECURITY_GROUP: ${{ vars.DEV_NETWORK_SECURITY_GROUP }}"
          echo "DEV_RESOURCE_ID: ${{ vars.DEV_RESOURCE_ID }}"
          echo "DEV_SUBNET_ADDRESS_PREFIXES: ${{ vars.DEV_SUBNET_ADDRESS_PREFIXES }}"
          echo "DEV_SUBNET_NAME: ${{ vars.DEV_SUBNET_NAME }}"
          echo "DEV_VNET_ADDRESS_SPACE: ${{ vars.DEV_VNET_ADDRESS_SPACE }}"
          echo "DEV_VNET_ID: ${{ vars.DEV_VNET_ID }}"
          echo "DEV_VNET_NAME: ${{ vars.DEV_VNET_NAME }}"
          echo "DEV_VNET_RESOURCE_GROUP: ${{ vars.DEV_VNET_RESOURCE_GROUP }}"
          echo "DEV_VNET_DNS_SERVERS: ${{ vars.DEV_VNET_DNS_SERVERS }}"
          echo "DEV_COMMON_TAGS: ${{ vars.DEV_COMMON_TAGS }}"
          # Backend configuration variables check
          echo "DEV_TFSTATE_RG: ${{ vars.DEV_TFSTATE_RG }}"
          echo "DEV_TFSTATE_SA: ${{ vars.DEV_TFSTATE_SA }}"
          echo "DEV_TFSTATE_CONTAINER: ${{ vars.DEV_TFSTATE_CONTAINER }}"

          # Fail if backend configuration variables are not set (assuming you're using a remote backend)
          if [ -z "${{ vars.DEV_TFSTATE_RG }}" ]; then echo "Error: DEV_TFSTATE_RG variable is not set!"; exit 1; fi
          if [ -z "${{ vars.DEV_TFSTATE_SA }}" ]; then echo "Error: DEV_TFSTATE_SA variable is not set!"; exit 1; fi
          if [ -z "${{ vars.DEV_TFSTATE_CONTAINER }}" ]; then echo "Error: DEV_TFSTATE_CONTAINER variable is not set!"; exit 1; fi
          if [ -z "${{ vars.DEV_VNET_DNS_SERVERS }}" ]; then echo "Error: DEV_VNET_DNS_SERVERS variable is not set!"; exit 1; fi
          if [ -z "${{ vars.DEV_COMMON_TAGS }}" ]; then echo "Error: DEV_COMMON_TAGS variable is not set!"; exit 1; fi

      - name: Create terraform/environments/dev directory if it doesn't exist
        run: mkdir -p terraform/environments/dev

      - name: Generate terraform.tfvars for dev
        run: |
          {
            echo "azure_location = \"$(printf %s \"${{ vars.AZURE_LOCATION }}\")\""
            echo "dev_resource_group = \"$(printf %s \"${{ vars.DEV_RESOURCE_GROUP }}\")\""
            echo "dev_storage_account_name = \"$(printf %s \"${{ vars.DEV_STORAGE_ACCOUNT_NAME }}\")\""
            echo "dev_file_share_name = \"$(printf %s \"${{ vars.DEV_FILE_SHARE_NAME }}\")\""
            echo "dev_file_share_quota_gb = $(printf %s \"${{ vars.DEV_FILE_SHARE_QUOTA_GB }}\")"
            echo "dev_dns_servers = ${{ vars.DEV_DNS_SERVERS }}"
            echo "dev_network_security_group = \"$(printf %s \"${{ vars.DEV_NETWORK_SECURITY_GROUP }}\")\""
            echo "dev_resource_id = \"$(printf %s \"${{ vars.DEV_RESOURCE_ID }}\")\""
            echo "dev_subnet_address_prefixes = ${{ vars.DEV_SUBNET_ADDRESS_PREFIXES }}"
            echo "dev_subnet_name = \"$(printf %s \"${{ vars.DEV_SUBNET_NAME }}\")\""
            echo "dev_vnet_address_space = ${{ vars.DEV_VNET_ADDRESS_SPACE }}"
            echo "dev_vnet_id = \"$(printf %s \"${{ vars.DEV_VNET_ID }}\")\""
            echo "dev_vnet_name = \"$(printf %s \"${{ vars.DEV_VNET_NAME }}\")\""
            echo "dev_vnet_resource_group = \"$(printf %s \"${{ vars.DEV_VNET_RESOURCE_GROUP }}\")\""
            echo "dev_vnet_dns_servers = ${{ vars.DEV_VNET_DNS_SERVERS }}"
            echo "common_tags = ${{ vars.DEV_COMMON_TAGS }}"
          } > terraform/environments/dev/terraform.tfvars

      - name: Display Generated terraform.tfvars (Debug Step)
        run: |
          echo "Content of terraform/environments/dev/terraform.tfvars:"
          cat terraform/environments/dev/terraform.tfvars || echo "File not found or empty."
          echo ""
          echo "--- IMPORTANT ---"
          echo "Verify that array values (like dev_dns_servers, dev_subnet_address_prefixes, dev_vnet_address_space, dev_vnet_dns_servers)"
          echo "are correctly formatted with double quotes around each string element, e.g., [\"item1\", \"item2\"]."
          echo "Also verify 'common_tags' is a valid HCL map."
          echo "If not, you need to update the value of the corresponding GitHub variable directly!"
          echo "--- END IMPORTANT ---"

      - name: Terraform Init
        id: terraform_init
        working-directory: terraform/environments/dev
        run: terraform init -backend-config="resource_group_name=${{ vars.DEV_TFSTATE_RG }}" -backend-config="storage_account_name=${{ vars.DEV_TFSTATE_SA }}" -backend-config="container_name=${{ vars.DEV_TFSTATE_CONTAINER }}" -backend-config="key=dev.terraform.tfstate"
        # IMPORTANT: For this -backend-config to be effective, you MUST have a
        # 'backend "azurerm" { ... }' block defined in your Terraform configuration
        # files (e.g., versions.tf or main.tf) within 'terraform/environments/dev'.
        # If this block is missing, Terraform will default to a local backend,
        # and these backend-config flags will be ignored, leading to warnings.
        # Ensure that the values for DEV_TFSTATE_RG, DEV_TFSTATE_SA, and DEV_TFSTATE_CONTAINER
        # are correctly set as variables in your GitHub repository settings.

      - name: Terraform Validate
        id: terraform_validate
        working-directory: terraform/environments/dev
        run: terraform validate

      - name: Terraform Plan
        id: terraform_plan
        working-directory: terraform/environments/dev
        run: terraform plan -var-file=terraform.tfvars -out=tfplan

      # Uncomment to enable apply
      # - name: Terraform Apply
      #   id: terraform_apply
      #   working-directory: terraform/environments/dev
      #   run: terraform apply -auto-approve tfplan
