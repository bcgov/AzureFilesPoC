# In /.github/workflows/main.yml
# This version REMOVES the problematic hashicorp/setup-terraform action
# and relies on the Terraform binary already installed on the runner VM.
name: MAIN Azure Files PoC Deploy Infrastructure

permissions:
  id-token: write
  contents: read

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
      plan_only:
        description: 'Only run plan (no apply)'
        required: true
        type: boolean
        default: true
  pull_request:
    branches: [ main ]
    paths:
      - 'terraform/**'
      - '.github/workflows/**'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  terraform-dev:
    name: 'Terraform Deploy to Dev (using self-hosted runner)'
    runs-on: self-hosted
    environment: dev
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_USE_OIDC: true
      TF_VAR_service_principal_id: ${{ secrets.SERVICE_PRINCIPAL_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # --- REMOVED: The problematic setup-terraform step is now gone. ---
      # - name: Set up Terraform
      #   uses: hashicorp/setup-terraform@v3
      #   with:
      #     terraform_version: 1.6.6

      # --- NEW: Verify the pre-installed Terraform on the runner ---
      - name: Verify Terraform Installation
        run: |
          echo "Verifying Terraform version installed on the runner..."
          terraform --version
          echo "Terraform is available at: $(which terraform)"

      - name: Azure Login (OIDC)
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          enable-AzPSSession: false

      - name: Generate terraform.tfvars for dev
        run: |
          # This script block generates the tfvars file needed for the plan/apply steps.
          cat <<EOF > terraform/environments/dev/terraform.tfvars
          # Auto-generated by GitHub Actions - DO NOT EDIT MANUALLY
          environment                       = "dev"
          azure_location                    = "${{ vars.AZURE_LOCATION }}"
          service_principal_id              = "${{ vars.SERVICE_PRINCIPAL_ID }}"
          vnet_name                         = "${{ vars.VNET_NAME }}"
          vnet_resource_group               = "${{ vars.VNET_RESOURCE_GROUP }}"
          vnet_address_space                = ${{ vars.VNET_ADDRESS_SPACE }}
          vnet_dns_servers                  = ${{ vars.VNET_DNS_SERVERS }}
          vnet_id                           = "${{ vars.VNET_ID }}"
          dns_servers                       = ${{ vars.DNS_SERVERS }}
          resource_group                    = "${{ vars.RESOURCE_GROUP }}"
          resource_id                       = "${{ vars.RESOURCE_ID }}"
          tfstate_container                 = "${{ vars.TFSTATE_CONTAINER }}"
          tfstate_rg                        = "${{ vars.TFSTATE_RG }}"
          tfstate_sa                        = "${{ vars.TFSTATE_SA }}"
          storage_account_name              = "${{ vars.STORAGE_ACCOUNT_NAME }}"
          file_share_name                   = "${{ vars.FILE_SHARE_NAME }}"
          file_share_quota_gb               = ${{ vars.FILE_SHARE_QUOTA_GB }}
          network_security_group            = "${{ vars.NETWORK_SECURITY_GROUP }}"
          storage_network_security_group    = "${{ vars.STORAGE_NETWORK_SECURITY_GROUP }}"
          storage_subnet_name               = "${{ vars.STORAGE_SUBNET_NAME }}"
          storage_subnet_address_prefix     = ${{ vars.STORAGE_SUBNET_ADDRESS_PREFIX }}
          subnet_name                       = "${{ vars.SUBNET_NAME }}"
          subnet_address_prefixes           = ${{ vars.SUBNET_ADDRESS_PREFIXES }}
          runner_subnet_name                = "${{ vars.RUNNER_SUBNET_NAME }}"
          runner_vnet_address_space         = ${{ vars.RUNNER_VNET_ADDRESS_SPACE }}
          runner_network_security_group     = "${{ vars.RUNNER_NETWORK_SECURITY_GROUP }}"
          my_github_actions_spn_object_id   = "${{ vars.MY_GITHUB_ACTIONS_SPN_OBJECT_ID }}"
          common_tags                       = ${{ vars.COMMON_TAGS }}
          blob_container_name                = "${{ vars.BLOB_CONTAINER_NAME }}"
          EOF

      - name: Terraform Init
        working-directory: terraform/environments/dev
        run: terraform init -backend-config="resource_group_name=${{ vars.TFSTATE_RG }}" -backend-config="storage_account_name=${{ vars.TFSTATE_SA }}" -backend-config="container_name=${{ vars.TFSTATE_CONTAINER }}"

      - name: Terraform Validate
        working-directory: terraform/environments/dev
        run: terraform validate

      - name: Terraform Plan
        id: plan
        working-directory: terraform/environments/dev
        run: terraform plan -out=tfplan

      - name: Terraform Apply
        if: (github.ref == 'refs/heads/main' && github.event_name == 'push') || (github.event_name == 'workflow_dispatch' && github.event.inputs.plan_only == 'false')
        working-directory: terraform/environments/dev
        run: terraform apply -auto-approve tfplan