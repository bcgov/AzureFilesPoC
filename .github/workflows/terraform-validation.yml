name: Terraform Validation Workflow

on:
  # Manual trigger only - for validation testing
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to validate (dev, test, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod
      cleanup:
        description: 'Automatically clean up validation resources after the run'
        required: true
        type: boolean
        default: true

permissions:
  id-token: write  # Required for OIDC
  contents: read   # Required for checkout

jobs:
  terraform-validation:
    name: Validate Terraform with Azure
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: ./terraform/validation
        run: terraform init

      - name: Terraform Validate
        working-directory: ./terraform/validation
        run: terraform validate

      # --- QUALITY GATES (RUN BEFORE PLAN/APPLY) ---
      
      - name: Terraform Format Check (fmt)
        working-directory: ./terraform/validation
        run: terraform fmt -check -recursive

      - name: Setup tflint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.50.3
          
      - name: Run tflint
        working-directory: ./terraform/validation
        run: tflint --init && tflint --recursive

      # Replacing the deprecated tfsec with Trivy for IaC scanning.
      - name: Run Trivy IaC vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          # Tell Trivy to scan the validation directory
          input: './terraform/validation'
          # Only fail the pipeline for HIGH and CRITICAL severity issues
          severity: 'HIGH,CRITICAL'
          exit-code: '1'
          format: 'table'

      # --- DEPLOYMENT STEPS ---

      - name: Terraform Plan
        working-directory: ./terraform/validation
        run: terraform plan -out=tfplan -var="environment=${{ inputs.environment }}"
        env:
          # Inject secrets and variables needed for the plan
          TF_VAR_dev_resource_group: ${{ secrets.DEV_RESOURCE_GROUP_NAME }}
          TF_VAR_dev_vnet_name: ${{ secrets.DEV_VNET_NAME }}
          TF_VAR_dev_vnet_resource_group: ${{ secrets.DEV_VNET_RESOURCE_GROUP }}
          TF_VAR_dev_subnet_name: ${{ vars.DEV_SUBNET_NAME }}
          TF_VAR_dev_subnet_address_prefixes: ${{ vars.DEV_SUBNET_ADDRESS_PREFIXES }}
          TF_VAR_dev_storage_account_name: ${{ vars.DEV_STORAGE_ACCOUNT_NAME }}
          # Note: No need to pass all variables here, only what's needed for the plan
          # Terraform will prompt for missing variables if any are required.

      - name: Terraform Apply
        working-directory: ./terraform/validation
        run: terraform apply -auto-approve tfplan

      - name: Verify Resource Creation
        run: |
          echo "‚úÖ Verifying resources were created successfully..."
          RESOURCE_GROUP=$(terraform -chdir=./terraform/validation output -raw resource_group_name)
          if az group show --name $RESOURCE_GROUP --query properties.provisioningState -o tsv | grep -q "Succeeded"; then
            echo "üéâ Validation complete! Resource group '$RESOURCE_GROUP' is provisioned."
          else
            echo "‚ùå Verification failed. Resource group not found or not in a 'Succeeded' state."
            exit 1
          fi

      # --- CLEANUP STEP ---

      - name: Terraform Destroy (Cleanup)
        if: ${{ inputs.cleanup }}
        working-directory: ./terraform/validation
        run: terraform destroy -auto-approve -var="environment=${{ inputs.environment }}"
        # Note: This step may fail if you don't have delete permissions,
        # but that's okay for validation purposes