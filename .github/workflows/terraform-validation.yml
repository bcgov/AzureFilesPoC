name: Terraform Validation Workflow

on:
  # Manual trigger only - for validation testing
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to validate (dev, test, prod)'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - test
          - prod
      cleanup:
        description: 'Automatically clean up validation resources'
        required: true
        type: boolean
        default: true

permissions:
  id-token: write  # Required for OIDC
  contents: read   # Required for checkout

jobs:
  terraform-validation:
    name: Validate Terraform with Azure
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Azure Login via OIDC
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
      
      - name: Terraform Init
        working-directory: ./terraform/validation
        run: terraform init
      
      - name: Terraform Validate
        working-directory: ./terraform/validation
        run: terraform validate
      
      - name: Terraform Plan
        working-directory: ./terraform/validation
        run: terraform plan -out=tfplan -var="environment=${{ inputs.environment }}"
      
      - name: Terraform Apply
        working-directory: ./terraform/validation
        run: terraform apply -auto-approve tfplan
      
      - name: Verify Resource Creation
        run: |
          echo "âœ… Verifying resources were created successfully..."
          RESOURCE_GROUP=$(terraform -chdir=./terraform/validation output -raw resource_group_name)
          az group show --name $RESOURCE_GROUP --query properties.provisioningState -o tsv
          echo "ðŸŽ‰ Validation complete! CI/CD pipeline is working."
      
      # Clean up resources if requested
      - name: Terraform Destroy (Cleanup)
        if: ${{ inputs.cleanup }}
        working-directory: ./terraform/validation
        run: terraform destroy -auto-approve -var="environment=${{ inputs.environment }}"
        # Note: This step may fail if you don't have delete permissions,
        # but that's okay for validation purposes

      # --- QUALITY GATES: Terraform Format Check ---
      - name: Terraform Format Check (fmt)
        working-directory: ./terraform/validation
        run: terraform fmt -check -recursive

      # --- QUALITY GATES: Terraform Lint (tflint) ---
      - name: Setup tflint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.50.3
      - name: Run tflint
        working-directory: ./terraform/validation
        run: tflint --init && tflint --recursive

      # --- QUALITY GATES: Terraform Security Scan (tfsec) ---
      - name: Setup tfsec
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          version: latest
      - name: Run tfsec
        working-directory: ./terraform/validation
        run: tfsec .
